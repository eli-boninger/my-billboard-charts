datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                  String  @id @default(cuid())
  email               String  @unique
  spotifyAuthorized   Boolean @default(false)
  spotifyRefreshToken String  @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password Password?

  lastUpdateJob DateTime?
  topTracks     TopTrack[]
  topArtist     TopArtist[]
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model TopArtist {
  id                String          @id @default(cuid())
  spotifyId         String
  name              String
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId            String
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  isCurrentlyRanked Boolean         @default(true)
  topArtistRanks    TopArtistRank[]

  @@unique([spotifyId, userId])
}

model TopArtistRank {
  id        String    @id @default(cuid())
  topItem   TopArtist @relation(fields: [topItemId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  topItemId String
  rank      Int
  createdAt DateTime  @default(now())
}

model TopTrack {
  id                String         @id @default(cuid())
  spotifyId         String
  name              String
  artists           String[]
  user              User           @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId            String
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  isCurrentlyRanked Boolean        @default(true)
  topTrackRanks     TopTrackRank[]
  album             String?

  @@unique([spotifyId, userId])
}

model TopTrackRank {
  id        String   @id @default(cuid())
  topItem   TopTrack @relation(fields: [topItemId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  topItemId String
  rank      Int
  createdAt DateTime @default(now())
}
