datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                  String  @id @default(cuid())
  email               String  @unique
  spotifyAuthorized   Boolean @default(false)
  spotifyRefreshToken String  @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password Password?

  lastUpdateJob DateTime?
  topItems      TopItem[]
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model TopItem {
  id                String        @id @default(cuid())
  spotifyId         String
  name              String
  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId            String
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  isCurrentlyRanked Boolean       @default(true)
  topItemRanks      TopItemRank[]
  topItemType       TopItemType
  album             String?
  artists           String[]

  @@unique([spotifyId, userId, topItemType])
}

enum TopItemType {
  ARTIST
  TRACK
}

model TopItemRank {
  id           String   @id @default(cuid())
  topItem      TopItem  @relation(fields: [topItemId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  topItemId    String
  rank         Int
  previousRank Int?
  createdAt    DateTime @default(now())
}
